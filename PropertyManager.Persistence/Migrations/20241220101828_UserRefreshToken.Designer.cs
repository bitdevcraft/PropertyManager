// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PropertyManager.Domain.Entities.Models.Bookings;
using PropertyManager.Persistence;

#nullable disable

namespace PropertyManager.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241220101828_UserRefreshToken")]
    partial class UserRefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "admin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "admin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "admin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "admin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "admin");
                });

            modelBuilder.Entity("PropertyManager.Domain.Common.Auditable.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audits", "audit");
                });

            modelBuilder.Entity("PropertyManager.Domain.Common.Auditable.AuditEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AuditId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuditId");

                    b.ToTable("AuditEntries", "audit");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Authorizations.Permissions.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ObjectFieldMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ObjectMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ObjectFieldMetadataId");

                    b.HasIndex("ObjectMetadataId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Permissions", "admin");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Authorizations.Permissions.PermissionAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionActions", "admin");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Authorizations.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .IsUnique();

                    b.HasIndex("DeletedById")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("UpdatedById")
                        .IsUnique();

                    b.ToTable("Roles", "admin");

                    b.HasData(
                        new
                        {
                            Id = "7db8bdb6-8ffe-4f73-903f-fe0424d52e10",
                            ConcurrencyStamp = "09c72f45-0b4f-47df-8b4f-61b15fbf8797",
                            IsDeleted = false,
                            Name = "SystemAdministrator",
                            NormalizedName = "SYSTEMADMINISTRATOR"
                        },
                        new
                        {
                            Id = "530b21d4-4dd9-4749-9444-ee1384d37d38",
                            ConcurrencyStamp = "fb8939f9-dd53-411d-844c-a3f8abe4da42",
                            IsDeleted = false,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c79c336b-5210-411e-b8c5-f6f210d06204",
                            ConcurrencyStamp = "9cf00316-8903-483c-8b0e-ab1a4e7f45c8",
                            IsDeleted = false,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Bookings.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AgentId")
                        .HasColumnType("text");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BookingStatus")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<int, BookingMilestone>>("Installments")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPlanId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("PropertyId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentPlanId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Bookings", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Bookings.BookingStatus", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Sequence"));

                    b.HasKey("Name");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("BookingStatus", "app");

                    b.HasData(
                        new
                        {
                            Name = "Pending",
                            NormalizedName = "PENDING",
                            Sequence = 0
                        },
                        new
                        {
                            Name = "Confirmed",
                            NormalizedName = "CONFIRMED",
                            Sequence = 0
                        },
                        new
                        {
                            Name = "Cancelled",
                            NormalizedName = "CANCELLED",
                            Sequence = 0
                        },
                        new
                        {
                            Name = "Completed",
                            NormalizedName = "COMPLETED",
                            Sequence = 0
                        });
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentPlans", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlanFee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("AmountOrRate")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<string>("MilestoneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.ToTable("PaymentPlanFees", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlanMilestone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("IntervalType")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentCount")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentPlanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPercentage")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPlanId");

                    b.ToTable("PaymentPlanMilestones", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Projects.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Projects.ProjectPaymentPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPlanId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPlanId");

                    b.HasIndex("ProjectId", "PaymentPlanId")
                        .IsUnique();

                    b.ToTable("ProjectPaymentPlans", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Property.Property", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Accessibility")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AgentContactInfo")
                        .HasColumnType("text");

                    b.Property<string>("AirConditioningType")
                        .HasColumnType("text");

                    b.Property<double>("BalconySize")
                        .HasColumnType("double precision");

                    b.Property<double>("BuiltUpArea")
                        .HasColumnType("double precision");

                    b.Property<bool>("ChildrenPlayArea")
                        .HasColumnType("boolean");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<bool>("Clubhouse")
                        .HasColumnType("boolean");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeveloperName")
                        .HasColumnType("text");

                    b.Property<bool>("Elevator")
                        .HasColumnType("boolean");

                    b.Property<string>("ExclusiveFeatures")
                        .HasColumnType("text");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("FurnishingStatus")
                        .HasColumnType("text");

                    b.Property<double>("GardenSize")
                        .HasColumnType("double precision");

                    b.Property<bool>("Gym")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("HandoverDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasElectricity")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasWater")
                        .HasColumnType("boolean");

                    b.Property<string>("HeatingSystem")
                        .HasColumnType("text");

                    b.Property<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("InternetConnectivity")
                        .HasColumnType("boolean");

                    b.Property<string>("LandUseType")
                        .HasColumnType("text");

                    b.Property<string>("Landmark")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<bool>("LaundryRoom")
                        .HasColumnType("boolean");

                    b.Property<string>("LegalApprovals")
                        .HasColumnType("text");

                    b.Property<string>("ListingType")
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<decimal>("MaintenanceFees")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfBedrooms")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<string>("OccupancyStatus")
                        .HasColumnType("text");

                    b.Property<string>("Orientation")
                        .HasColumnType("text");

                    b.Property<decimal>("OtherCharges")
                        .HasColumnType("numeric");

                    b.Property<string>("OwnerName")
                        .HasColumnType("text");

                    b.Property<string>("OwnershipType")
                        .HasColumnType("text");

                    b.Property<int>("ParkingSpaces")
                        .HasColumnType("integer");

                    b.Property<string>("PermitsRequired")
                        .HasColumnType("text");

                    b.Property<double>("PlotArea")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PricePerUnitArea")
                        .HasColumnType("numeric");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("PropertyStatus")
                        .HasColumnType("text");

                    b.Property<decimal>("PropertyTax")
                        .HasColumnType("numeric");

                    b.Property<string>("PropertyType")
                        .HasColumnType("text");

                    b.Property<string>("RenovationDetails")
                        .HasColumnType("text");

                    b.Property<bool>("Security")
                        .HasColumnType("boolean");

                    b.Property<decimal>("SecurityDeposit")
                        .HasColumnType("numeric");

                    b.Property<bool>("SmartHomeFeatures")
                        .HasColumnType("boolean");

                    b.Property<string>("SoilQuality")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<bool>("StorageRoom")
                        .HasColumnType("boolean");

                    b.Property<bool>("SwimmingPool")
                        .HasColumnType("boolean");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.Property<string>("TenureInformation")
                        .HasColumnType("text");

                    b.Property<string>("TermsOfAgreement")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TimeIn")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("TimeOut")
                        .HasColumnType("interval");

                    b.Property<string>("TitleDeedNumber")
                        .HasColumnType("text");

                    b.Property<double>("TotalArea")
                        .HasColumnType("double precision");

                    b.Property<string>("UtilityMeters")
                        .HasColumnType("text");

                    b.Property<List<string>>("VideoUrls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("View")
                        .HasColumnType("text");

                    b.Property<string>("VirtualTourUrl")
                        .HasColumnType("text");

                    b.Property<string>("ZoningInformation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Properties", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Property.Rental", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BookingId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Rental", "app");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Users.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "admin");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .IsUnique();

                    b.HasIndex("DeletedById")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById")
                        .IsUnique();

                    b.ToTable("Users", "admin");

                    b.HasData(
                        new
                        {
                            Id = "e63a9b1c-2f89-406e-a5dc-d6ebe5cdf05a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a8da652-6aa3-4801-b57c-5e0eb6a5c62a",
                            Email = "sysadmin@localhost.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastName = "System Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@LOCALHOST.COM",
                            NormalizedUserName = "SYSADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyf3fEytP2MEWkrzjRnvsQxCRtr95BvKdVQ7MGqX6mhIaoQ99wFYd1Z9O1JUj3Xxg==",
                            PhoneNumberConfirmed = false,
                            RoleId = "7db8bdb6-8ffe-4f73-903f-fe0424d52e10",
                            SecurityStamp = "49f6cc36-003c-4586-9d08-ab5f5b63ca5b",
                            TwoFactorEnabled = false,
                            UserName = "SysAdmin"
                        },
                        new
                        {
                            Id = "52f9a82a-e4b6-4f67-ae91-2e173aa21a1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6611a6f-9c7d-4c3f-978d-80067f860b4e",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "DEMOADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMgQo1y2R9TlnCdjOERqqDvT3gffOD/WyZJaBVHVV9BCneKdZDIyEpMunZokRcZTw==",
                            PhoneNumberConfirmed = false,
                            RoleId = "530b21d4-4dd9-4749-9444-ee1384d37d38",
                            SecurityStamp = "37ff4fa6-5d28-4e5c-afc7-d5b1a19e26cb",
                            TwoFactorEnabled = false,
                            UserName = "DemoAdmin"
                        },
                        new
                        {
                            Id = "a901fdf4-edcb-4b6d-9a65-40df5b062f24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d08daa79-1cc4-4135-8a30-c647b05e0ab6",
                            Email = "user@localhost.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "DEMOUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEQR2ANu/wyqnnTd3VCPkGi+9eC7423RulKIDRzRbdhdYCdQPMUa4abFURwcOAIRTw==",
                            PhoneNumberConfirmed = false,
                            RoleId = "c79c336b-5210-411e-b8c5-f6f210d06204",
                            SecurityStamp = "eb2450c1-ad53-4dcf-a8cd-4c751972d4df",
                            TwoFactorEnabled = false,
                            UserName = "DemoUser"
                        });
                });

            modelBuilder.Entity("PropertyManager.Domain.Metadata.ObjectFieldMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsCollection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLookup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ObjectMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("RelatedObject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ObjectMetadataId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ObjectFieldMetadata", "metadata");
                });

            modelBuilder.Entity("PropertyManager.Domain.Metadata.ObjectMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ObjectMetadata", "metadata");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Authorizations.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Authorizations.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertyManager.Domain.Common.Auditable.AuditEntry", b =>
                {
                    b.HasOne("PropertyManager.Domain.Common.Auditable.Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Authorizations.Permissions.Permission", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Authorizations.Permissions.PermissionAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("PropertyManager.Domain.Metadata.ObjectFieldMetadata", "ObjectFieldMetadata")
                        .WithMany()
                        .HasForeignKey("ObjectFieldMetadataId");

                    b.HasOne("PropertyManager.Domain.Metadata.ObjectMetadata", "ObjectMetadata")
                        .WithMany()
                        .HasForeignKey("ObjectMetadataId");

                    b.HasOne("PropertyManager.Domain.Entities.Authorizations.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Action");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ObjectFieldMetadata");

                    b.Navigation("ObjectMetadata");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Authorizations.Roles.Role", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "CreatedBy")
                        .WithOne()
                        .HasForeignKey("PropertyManager.Domain.Entities.Authorizations.Roles.Role", "CreatedById");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "DeletedBy")
                        .WithOne()
                        .HasForeignKey("PropertyManager.Domain.Entities.Authorizations.Roles.Role", "DeletedById");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("PropertyManager.Domain.Entities.Authorizations.Roles.Role", "UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Bookings.Booking", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlan", "PaymentPlan")
                        .WithMany()
                        .HasForeignKey("PaymentPlanId");

                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.Property.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId");

                    b.Navigation("Agent");

                    b.Navigation("Customer");

                    b.Navigation("PaymentPlan");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlanFee", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlanMilestone", "Milestone")
                        .WithMany("Fees")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlanMilestone", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlan", "PaymentPlan")
                        .WithMany("Milestones")
                        .HasForeignKey("PaymentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentPlan");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Projects.ProjectPaymentPlan", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlan", "PaymentPlan")
                        .WithMany()
                        .HasForeignKey("PaymentPlanId");

                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.Projects.Project", "Project")
                        .WithMany("PaymentPlans")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentPlan");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Property.Property", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Property.Rental", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Models.Bookings.Booking", "Booking")
                        .WithMany("Rentals")
                        .HasForeignKey("BookingId");

                    b.HasOne("PropertyManager.Domain.Entities.Models.Inventories.Property.Property", "Property")
                        .WithMany("Availabilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Users.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "CreatedBy")
                        .WithOne()
                        .HasForeignKey("PropertyManager.Domain.Entities.Users.User", "CreatedById");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "DeletedBy")
                        .WithOne()
                        .HasForeignKey("PropertyManager.Domain.Entities.Users.User", "DeletedById");

                    b.HasOne("PropertyManager.Domain.Entities.Authorizations.Roles.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("PropertyManager.Domain.Entities.Users.User", "UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PropertyManager.Domain.Metadata.ObjectFieldMetadata", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("PropertyManager.Domain.Metadata.ObjectMetadata", "ObjectMetadata")
                        .WithMany("Fields")
                        .HasForeignKey("ObjectMetadataId");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ObjectMetadata");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PropertyManager.Domain.Metadata.ObjectMetadata", b =>
                {
                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("PropertyManager.Domain.Entities.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PropertyManager.Domain.Common.Auditable.Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Authorizations.Roles.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Bookings.Booking", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlan", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.PaymentPlans.PaymentPlanMilestone", b =>
                {
                    b.Navigation("Fees");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Projects.Project", b =>
                {
                    b.Navigation("PaymentPlans");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Models.Inventories.Property.Property", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("PropertyManager.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("PropertyManager.Domain.Metadata.ObjectMetadata", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
